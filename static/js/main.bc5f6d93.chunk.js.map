{"version":3,"sources":["api/index.js","components/Map.js","components/StateInfo.js","components/MapSelect.js","components/Header.js","components/ColorScale.js","components/HeatMap.js","App.js","serviceWorker.js","index.js"],"names":["fetchData","a","axios","get","data","modData","map","stateData","date","state","positive","negative","hospitalizedCurrently","recovered","death","console","log","fetchCountyData","modCountyData","message","countyData","countyName","county_name","stateName","state_name","confirmed","fatalityRate","fatality_rate","Map","setStateCard","useState","setStateData","useEffect","fetchAPI","projection","data-tip","geography","geographies","geo","key","rsmKey","fill","onMouseEnter","s_info","allStates","find","s","name","properties","api_num","onMouseLeave","style","default","stroke","outline","hover","pressed","useStyles","makeStyles","theme","root","flexGrow","padding","card","position","boxShadow","backgroundColor","StateInfo","classes","className","Card","Typography","MapSelect","props","React","value","setValue","FormControl","component","RadioGroup","aria-label","onChange","e","target","setMapType","row","FormControlLabel","control","Radio","label","title","alignItems","mapSelect","Header","AppBar","Toolbar","Grid","container","spacing","item","xs","variant","paper","height","width","background","caseNumberMax","fontSize","cardTitle","fontWeight","paddingTop","ColorScale","Paper","maxConfirmed","gutterBottom","maxCounty","HeatMap","setCountyData","colorScale","scaleQuantile","domain","d","range","maxState","prop","max","i","length","parseInt","getMax","cur","App","usState","content","curTime","Date","toLocaleString","stateCard","mapType","handleStateChange","fetchedData","setState","fetchedCountyData","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.bc5f6d93.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst url = 'https://api.covidtracking.com'\n\nconst countyUrl = 'https://covid19-us-api.herokuapp.com/county'\n\nexport const fetchData = async() => {\n    \n    try {\n        const { data } = await axios.get(`${url}/v1/states/current.json`)\n\n        const modData = data.map((stateData) => ({ \n            date: stateData.date,\n            state: stateData.state,\n            positive: stateData.positive,\n            negative: stateData.negative,\n            hospitalizedCurrently: stateData.hospitalizedCurrently,\n            recovered: stateData.recovered,\n            death: stateData.death,\n        }))\n        return modData\n\n    }\n    catch (error) {\n        console.log(error)\n\n    }\n\n\n}\n\nexport const fetchCountyData = async() => {\n    \n    try {\n        const { data } = await axios.get('https://covid19-us-api.herokuapp.com/county')\n\n        const modCountyData = data.message.map((countyData) => ({ \n            countyName: countyData.county_name,\n            stateName: countyData.state_name,\n            confirmed: countyData.confirmed,\n            death: countyData.death,\n            fatalityRate: countyData.fatality_rate,\n        }))\n        return modCountyData\n\n    }\n    catch (error) {\n        console.log(error)\n\n    }\n\n\n}","import React, {useState, useEffect} from 'react';\nimport { geoCentroid, geoAlbersUsa, geoIdentity } from \"d3-geo\";\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\nimport { fetchData, fetchCountyData } from '../api';\nimport allStates from \"../data/allstates.json\";\nimport { scaleQuantile } from \"d3-scale\";\n\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\"; \n\nconst geoUrlCounties = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\";\n\n//    const listItems = stateData.map(({positive}) => <li>{positive}</li>);\n\nconst Map = ({setStateCard}) => {\n  const [stateData, setStateData] = useState([]);\n  //const [countyData, setCountyData] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n        setStateData(await fetchData());\n        \n    }\n    fetchAPI();\n});\n\n    return(\n        <ComposableMap projection=\"geoAlbersUsa\" \n        data-tip=\"\"\n        >\n          \n      <Geographies geography={geoUrl}>\n        {({ geographies }) => (\n          <>\n            {geographies.map(geo => (\n              \n              \n              <Geography\n                key={geo.rsmKey} //unique keys \n                geography={geo}\n                fill = \"#e0e0e0\"\n                onMouseEnter={() => {\n                  const s_info = allStates.find(s => s.name === geo.properties.name)\n                  //const cur = allStates.find(s => s.val === geo.id);\n\n                  setStateCard(stateData[s_info.api_num])\n                  \n                }}\n                onMouseLeave={() => {\n                  setStateCard({});\n                }}\n                style={{\n                  default: {\n                    stroke: \"#0d47a1\", \n                    outline: \"none\"\n                  },\n                  hover: {\n                    fill: \"#64b5f6\",\n                    stroke: \"#64b5f6\"\n                  },\n                  pressed: {\n                    fill: \"#D6D6DA\",\n                   \n                  }\n                }}\n              />\n              )\n              )}\n            \n          </>\n        )}\n      </Geographies>\n     \n    </ComposableMap>\n\n    )\n\n}\n\nexport default Map","import React, {useState, useEffect} from 'react';\nimport { fetchData } from '../api';\nimport {Card, CardContent, Typography, Grid, makeStyles} from '@material-ui/core';\nimport { scaleQuantile } from \"d3-scale\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      padding: \"5px\"  \n    },\n    card: {\n        position: \"fixed\",\n        boxShadow: \"none\",\n        backgroundColor: \"#b2ebf2\",\n        padding: \"5px\"\n    }\n    \n  }));\n\n\nconst StateInfo = ({data: {state, positive, negative, hospitalizedCurrently, recovered, death}}) => {\n    const classes = useStyles();\n\n\n    return(\n        <div className={classes.root}> \n            <Card className={classes.card}>\n                <Typography>\n                    State: {state}\n                </Typography>\n                <Typography>\n                    Positive: {positive}\n                </Typography>\n                <Typography>\n                    Negative: {negative}\n                </Typography>\n                <Typography>\n                    Currently Hospitalized: {hospitalizedCurrently}\n                </Typography>\n                <Typography>\n                    Recovered: {recovered}\n                </Typography>\n                <Typography>\n                    Deaths: {death}\n                </Typography>\n            </Card>\n            \n        </div>\n\n    )\n\n}\nexport default StateInfo; ","import React from 'react'\nimport { makeStyles, FormLabel, FormControl, Radio, RadioGroup, FormControlLabel} from '@material-ui/core'\n\n\n//give the set value back to map.js. \n//Use another function to assign the value here to a state located in App.js\n//Create the function in App.js and pass it though to this file. \n//this file will set the value of that state. \n//once that state has a set file name, then that state will conditionally render the second map component file that has yet to be made\n//probably dont need to use the handleChange function in this file, maybe \n\n\n\nconst useStyles = makeStyles(() => ({\n    root: {\n      flexGrow: 1,  \n    },\n    \n  }));\n\nfunction MapSelect(props) {\n    const classes = useStyles();\n    const [value, setValue] = React.useState('');\n    const handleChange = (e) => {\n        setValue(e.target.value)\n        props.setMapType(e.target.value)   \n    }\n    return (\n        <div className={classes.root}>\n            <FormControl component=\"fieldset\">\n                    <RadioGroup aria-label='map type' value={value} onChange={handleChange} row>\n                        <FormControlLabel value=\"heat\" control={<Radio />} label=\"heat\" />\n                        <FormControlLabel value=\"highlight\" control={<Radio />} label=\"highlight\" />\n                    </RadioGroup>\n            </FormControl>\n            \n        </div>\n    );\n}\n\nexport default MapSelect;\n\n\n\n\n\n","import React, {useState, useEffect} from 'react'\nimport {AppBar, Toolbar, Grid, makeStyles, IconButton} from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport MapSelect from './MapSelect';\n\n\nconst useStyles = makeStyles(() => ({\n    root: {\n      flexGrow: 1,  \n    },\n    title: {\n        alignItems: 'center',\n    },\n    date: {\n        alignItems: 'center', \n    },\n    mapSelect: {\n    \n    }\n  }));\n\nfunction Header(props) {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Grid container spacing={2}>\n                        <Grid container item xs={4} className={classes.title}>\n                        <Typography variant=\"h5\">\n                            Coronavirus Interactive US Map\n                        </Typography>\n                        </Grid>\n                        <Grid container item xs={2} className={classes.date}>\n                        <Typography variant=\"h7\">\n                         {props.date}\n                        </Typography>\n                        </Grid>\n                        \n                        <Grid item xs={4}>\n                            <MapSelect setMapType={props.setMapType}/>\n                        </Grid>\n                        <Grid container item xs={2} alignItems=\"center\">\n                            Search bar\n                        </Grid>\n                        </Grid>\n                </Toolbar>\n            </AppBar>\n            \n        </div>\n    );\n}\nexport default Header;","import React from 'react';\nimport {Card, Paper, makeStyles,Typography, CardHeader} from '@material-ui/core'\n\n//TODO: get the number of cases from the thing as a prop, and pass it thru\n//then with those numbers (low and high) put them in a typography\n//align all the shit with the grid\n//figure out the padding\n//once this is done, put it up on resume and github and CONTINUE WORKING ON IT  \n\nconst useStyles = makeStyles(() => ({\n    root: {\n      flexGrow: 1,\n      \n    },\n    paper: {\n        position: \"fixed\",\n        height: \"30px\",\n        width: \"200px\",\n        background:\"linear-gradient(0.25turn, #e65100, #ffe0b2)\", \n        \n        \n    },\n    card: {\n        height: \"80px\",\n        width: \"200px\",\n        boxShadow : \"none\",\n        position: \"fixed\",\n        \n\n        \n    },\n    caseNumberMax: {\n        fontSize: 14,\n    },\n    cardTitle: {\n        fontSize: 14,\n        fontWeight: \"bold\"\n    },\n    countyName: {\n        paddingTop: \"15%\",\n        fontSize: 14\n    }\n\n}));\n\nfunction ColorScale(props) { \n    const classes = useStyles();\n    return(\n        <div className={classes.root}> \n        \n            <Card className={classes.card} variant=\"outlined\">\n                <Typography className={classes.cardTitle}>\n                    County with the most cases\n                    </Typography>\n                   <Paper className={classes.paper}>\n                    <Typography variant='h8' className={classes.caseNumberMax}>\n                        {props.maxConfirmed} cases\n                    </Typography>\n                </Paper>\n                <Typography gutterBottom className={classes.countyName}>\n                {props.maxCounty} County\n            </Typography>\n            \n           \n        </Card>   \n        </div>\n    );\n}\nexport default ColorScale;","import React, {useState, useEffect} from 'react';\nimport { ComposableMap, Geographies, Geography} from \"react-simple-maps\";\nimport { fetchData, fetchCountyData } from '../api';\nimport allStates from \"../data/allstates.json\";\nimport { scaleQuantile } from \"d3-scale\";\nimport ColorScale from './ColorScale'\n\n//todo: add legend for color scale, add search function to pull the statistics for each\n\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\";\n\n\nconst HeatMap = ( ) => {\n    const [countyData, setCountyData] = useState([]);\n    //const [countyData, setCountyData] = useState([]);\n  \n    useEffect(() => {\n      const fetchAPI = async () => {\n          setCountyData(await fetchCountyData());\n          console.log(countyData)\n      }\n      fetchAPI();\n  });\n \nconst colorScale = scaleQuantile()\n    .domain(countyData.map(d => d.confirmed))\n    .range([\n      \"#ffe0b2\",\n      \"#ffcc80\",\n      \"#ffb74d\",\n      \"#ffa726\",\n      \"#ff9800\",\n      \"#fb8c00\",\n      \"#f57c00\",\n      \"#ef6c00\",\n      \"#e65100\"\n    ]);\n    //    const listItems = stateData.map(({positive}) => <li>{positive}</li>);\n\n    function getMax(countyData, prop){\n      var max; \n      for (var i=0; i<countyData.length; i++){\n        if (max == null || parseInt(countyData[i][prop]) > parseInt(max[prop])){\n          max = countyData[i];\n        }\n      }\n      return max;\n    }\n\n    var maxState = getMax(countyData, \"confirmed\") \n    console.log(maxState)\n    if (maxState){\n      var maxConfirmed = maxState.confirmed\n      var maxCounty = maxState.countyName\n      \n      \n    }\n\n    return(\n      \n      <div>\n        <ColorScale maxConfirmed={maxConfirmed} maxCounty={maxCounty}/>\n        <ComposableMap projection=\"geoAlbersUsa\">\n            <Geographies geography={geoUrl}>\n        {({ geographies }) =>\n          geographies.map(geo => {\n            const cur = countyData.find(s => s.countyName === geo.properties.name);\n\n            return (\n              <Geography\n                key={geo.rsmKey}\n                geography={geo}\n                fill={cur ? colorScale(cur.confirmed) : \"#EEE\"}\n              />\n            );\n          })\n        }\n        </Geographies>\n        </ComposableMap>\n      </div>\n        \n    )\n\n}\n\nexport default HeatMap","import React, {Component, useState} from 'react';\nimport Map from './components/Map';\nimport StateInfo from './components/StateInfo';\nimport {fetchData, fetchCountyData} from './api';\nimport Header from './components/Header';\nimport HeatMap from './components/HeatMap'\nimport ColorScale from './components/ColorScale'\n\n\n//the US state is probably not needed, but take that out later\n\n\nclass App extends Component {\n  \n  state = {\n    data: {},\n    usState: '',\n    content: '',\n    curTime : new Date().toLocaleString(),\n    stateCard: {},\n    countyData: {},\n    mapType: ''\n  }\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    const fetchedCountyData = await fetchCountyData();\n    \n\n    this.setState({data: fetchedData});\n    this.setState({countyData: fetchedCountyData})\n  }\n\n  //this function is not needed at the moment as well\n  handleStateChange = async (usState) => {\n    const fetchedData = await fetchData();\n    this.setState({data: fetchedData, usState: usState})\n  }\n  \n  setStateCard = async (stateCard) =>{\n    this.setState({stateCard: stateCard})\n  }\n\n  setMapType = async (mapType) =>{\n    this.setState({mapType: mapType})\n    console.log(\"type: \", mapType)\n  }\n\n  render() {\n    const { countyData, curTime, stateCard, mapType} = this.state;\n    \n    return (\n      <div>\n        <Header date={curTime} setMapType={this.setMapType}></Header>\n        \n        {mapType === \"heat\" ? (null) \n        : \n        <StateInfo data={stateCard}/>}\n\n        {mapType === \"heat\" ? (<HeatMap countyData={countyData}/>) \n        : \n        <Map \n        setStateCard={this.setStateCard}\n        />}\n  \n      \n        \n      \n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}